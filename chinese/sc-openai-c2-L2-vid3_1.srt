1
00:00:00,000 --> 00:00:07,000
在本节中，我们将重点关注评估输入的任务，这对于确保系统的质量和安全性非常重要。

2
00:00:07,000 --> 00:00:12,000
对于需要处理不同情况的大量独立指令集的任务，

3
00:00:12,000 --> 00:00:18,000
首先对查询类型进行分类，然后使用该分类来确定要使用哪些指令可能会有益。

4
00:00:18,000 --> 00:00:25,000
这可以通过定义固定类别和硬编码与处理给定类别任务相关的指令来实现。

5
00:00:25,000 --> 00:00:34,000
例如，在构建客户服务助手时，首先对查询类型进行分类，然后根据该分类确定要使用哪些指令可能非常重要。

6
00:00:34,000 --> 00:00:42,000
因此，例如，如果用户要求关闭其帐户，您可能会提供不同的次要指令，而如果用户要求有关特定产品的信息，则可能会提供其他次要指令。

7
00:00:42,000 --> 00:00:46,000
因此，在第一种情况下，您可能会添加有关如何关闭帐户的其他指令。

8
00:00:46,000 --> 00:00:49,000
然后在第二种情况下，您可能会添加其他产品指令。

9
00:00:49,000 --> 00:00:56,000
但是让我们看一个例子，我认为这会更清楚。

10
00:00:56,000 --> 00:01:00,000
所以这里我们有我们的系统消息，这是整个系统的指令。

11
00:01:00,000 --> 00:01:02,000
我们正在使用这个分隔符。

12
00:01:02,000 --> 00:01:07,000
它的限制器只是一种分隔指令或输出不同部分的方法。

13
00:01:07,000 --> 00:01:11,000
它有助于模型确定不同的部分。

14
00:01:11,000 --> 00:01:15,000
因此，对于此示例，我们将使用哈希标签作为分隔符。

15
00:01:15,000 --> 00:01:21,000
这是一个不错的分隔符，因为它实际上表示为一个标记。
 
16
00:01:21,000 --> 00:01:23,000
这是我们的系统消息。

17
00:01:23,000 --> 00:01:25,000
我们要求模型做什么。

18
00:01:25,000 --> 00:01:28,000
您将获得客户服务查询。

19
00:01:28,000 --> 00:01:32,000
客户服务查询将用这些哈希标记字符分隔。

20
00:01:32,000 --> 00:01:41,000
将每个查询分类为主要类别和次要类别，然后以JSON格式提供输出，其中键为primary和secondary。

21
00:01:41,000 --> 00:01:45,000
这里列出了我们的主要类别。

22
00:01:45,000 --> 00:01:48,000
因此，计费、技术支持、帐户管理或一般查询。

23
00:01:48,000 --> 00:01:52,000
然后在下面，我们列出了次要类别的列表。

24
00:01:52,000 --> 00:01:56,000
取消订阅升级等。

25
00:01:56,000 --> 00:02:01,000
现在，让我们举一个用户消息的例子。

26
00:02:01,000 --> 00:02:08,000
因此，对于我们的第一个用户消息，我们将使用。

27
00:02:08,000 --> 00:02:12,000
以下。

28
00:02:12,000 --> 00:02:20,000
因此，用户消息，我要求您删除我的个人资料和所有用户数据。

29
00:02:20,000 --> 00:02:30,000
然后，我们将其格式化为消息列表，其中系统消息和用户消息用这些哈希标记分隔。

30
00:02:30,000 --> 00:02:33,000
让我们看看我们认为这可能是什么。

31
00:02:33,000 --> 00:02:36,000
所以我要求您删除我的个人资料。

32
00:02:36,000 --> 00:02:39,000
这有点像帐户管理。

33
00:02:39,000 --> 00:02:41,000
也许是关闭帐户。

34
00:02:41,000 --> 00:02:47,000
让我们看看模型的想法。

35
00:02:47,000 --> 00:02:48,000
很好。

36
00:02:48,000 --> 00:02:55,000
因此，模型的分类是帐户管理作为主要类别，关闭帐户作为次要类别。
 
37
00:02:55,000 --> 00:03:03,000
请求结构化输出（如JSON）的好处在于，您可以将其轻松地读入某种对象中。

38
00:03:03,000 --> 00:03:07,000
例如，在Python中使用字典，或者如果您使用不同的语言，则使用其他内容。

39
00:03:07,000 --> 00:03:13,000
然后，您可以将此用作后续步骤的输入。

40
00:03:13,000 --> 00:03:23,000
我将向您展示另一个示例，但现在可以随时暂停视频并尝试自己的用户问题，看看模型如何对其进行分类。

41
00:03:23,000 --> 00:03:25,000
这是另一个用户消息。

42
00:03:25,000 --> 00:03:27,000
告诉我更多关于你的平板电视。

43
00:03:27,000 --> 00:03:33,000
然后我们只需从模型中获得相同的消息列表响应，然后将其打印出来。

44
00:03:33,000 --> 00:03:40,000
在这里，我们有第二个分类，看起来是正确的。

45
00:03:40,000 --> 00:03:49,000
因此，基于客户查询的分类，我们现在可以提供一组更具体的指令来处理下一步。

46
00:03:49,000 --> 00:03:58,000
在这种情况下，我们可能会添加有关电视的其他信息，而在这种情况下，我们可能希望提供关闭帐户的链接或类似内容。

47
00:03:58,000 --> 00:04:03,000
我们将在以后的视频中了解有关处理输入的不同方法。

48
00:04:03,000 --> 00:04:19,000
在下一个视频中，我们将探讨更多评估输入的方法，特别是确保您的用户以负责任的方式使用系统的方法。